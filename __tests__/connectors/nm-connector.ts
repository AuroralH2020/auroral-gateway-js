/* eslint-disable import/order */
/* eslint-disable import/first */
jest.mock('got')
jest.mock('fs')
import { nm } from '../../src/connectors/nm-connector'
import { RecordType } from '../../src/types/xmpp-types'
import got from '../../__mocks__/got'

beforeEach(() => {
    got.__notFail()
})

afterEach(() => {    
    jest.clearAllMocks()
})
const errorMessage = { 'message': 'MOCKED ERROR', 'stack': undefined, 'status': 500 }

describe('agent-connector', () => {
    it('Do handshake', async () => {
        const spy = jest.spyOn(nm, 'handshake')
        const response = await nm.handshake()
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.handshake()).rejects.toMatchObject(errorMessage)
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getCounters', async () => {
        const spy = jest.spyOn(nm, 'getCounters')
        const response = await nm.getCounters()
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getCounters()).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do postCounters', async () => {
        const spy = jest.spyOn(nm, 'postCounters')
        const response = await nm.postCounters([{  } as any as RecordType])
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.postCounters([{  } as any as RecordType])).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getItemRoster', async () => {
        const spy = jest.spyOn(nm, 'getItemRoster')
        const response = await nm.getItemRoster('sourceoid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getItemRoster('asd')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do registerItems', async () => {
        const spy = jest.spyOn(nm, 'registerItems')
        const response = await nm.registerItems('agid', [])
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.registerItems('agid', [])).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do removeItems', async () => {
        const spy = jest.spyOn(nm, 'removeItems')
        const response = await nm.removeItems('agid', [])
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.removeItems('agid', [])).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do modifyItems', async () => {
        const spy = jest.spyOn(nm, 'modifyItems')
        const response = await nm.modifyItems('agid', [])
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.modifyItems('agid', [])).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do deleteAgent', async () => {
        const spy = jest.spyOn(nm, 'deleteAgent')
        const response = await nm.deleteAgent('agid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.deleteAgent('agid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getAgentItems', async () => {
        const spy = jest.spyOn(nm, 'getAgentItems')
        const response = await nm.getAgentItems('agid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getAgentItems('agid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getAgentPrivacy', async () => {
        const spy = jest.spyOn(nm, 'getAgentPrivacy')
        const response = await nm.getAgentPrivacy()
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getAgentPrivacy()).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getCidFromReqid', async () => {
        const spy = jest.spyOn(nm, 'getCidFromReqid')
        const response = await nm.getCidFromReqid('reqid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getCidFromReqid('reqid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getPartners', async () => {
        const spy = jest.spyOn(nm, 'getPartners')
        const response = await nm.getPartners()
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getPartners()).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getPartner', async () => {
        const spy = jest.spyOn(nm, 'getPartner')
        const response = await nm.getPartner('partnerid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getPartner('partnerid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getContractedItemsByCid', async () => {
        const spy = jest.spyOn(nm, 'getContractedItemsByCid')
        const response = await nm.getContractedItemsByCid('cid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getContractedItemsByCid('cid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getCommunities', async () => {
        const spy = jest.spyOn(nm, 'getCommunities')
        const response = await nm.getCommunities()
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getCommunities()).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getNodesInMyOrganisation', async () => {
        const spy = jest.spyOn(nm, 'getNodesInMyOrganisation')
        const response = await nm.getNodesInMyOrganisation()
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getNodesInMyOrganisation()).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getNodesMyOrganisation', async () => {
        const spy = jest.spyOn(nm, 'getNodesMyOrganisation')
        const response = await nm.getNodesMyOrganisation('cid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getNodesMyOrganisation('cid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getNodesInOrganisation', async () => {
        const spy = jest.spyOn(nm, 'getNodesInOrganisation')
        const response = await nm.getNodesInOrganisation('cid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getNodesInOrganisation('cid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getNodesInCommunity', async () => {
        const spy = jest.spyOn(nm, 'getNodesInCommunity')
        const response = await nm.getNodesInCommunity('cid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getNodesInCommunity('cid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getItemsInMyOrganisation', async () => {
        const spy = jest.spyOn(nm, 'getItemsInMyOrganisation')
        const response = await nm.getItemsInMyOrganisation()
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getItemsInMyOrganisation()).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getItemsInContract', async () => {
        const spy = jest.spyOn(nm, 'getItemsInContract')
        const response = await nm.getItemsInContract('cid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getItemsInContract('cid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getAgidByOid', async () => {
        const spy = jest.spyOn(nm, 'getAgidByOid')
        const response = await nm.getAgidByOid('oid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getAgidByOid('oid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
    it('Do getPubkey', async () => {
        const spy = jest.spyOn(nm, 'getPubkey')
        const response = await nm.getPubkey('agid')
        expect(response).toMatch('test')
        got.__toFail()
        await expect(nm.getPubkey('agid')).rejects.toThrowError()
        expect(spy).toHaveBeenCalledTimes(2)
    })
})
